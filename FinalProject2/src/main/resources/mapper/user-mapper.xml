<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<mapper namespace="user">

	<select id="selectUserWithEmail" parameterType="string" resultType="map">
		SELECT * FROM (SELECT * FROM TB_USER_ACTIVE WHERE USER_EMAIL=#{email}) LEFT JOIN TB_USER USING(USER_NO) LEFT JOIN TB_BASIC_USER USING(USER_NO) LEFT JOIN TB_NAVER_USER USING(USER_NO)
	</select>
	
	<insert id="insertUser" parameterType="map">
		<selectKey order="BEFORE" resultType="_int" keyProperty="USER_NO">SELECT SEQ_USER_NO.NEXTVAL FROM DUAL </selectKey>
			INSERT ALL 
				INTO TB_USER VALUES(#{USER_NO}, 1) 
				INTO TB_USER_ACTIVE VALUES(#{USER_NO}, #{USER_EMAIL}, #{USER_NAME}, SYSDATE , '/resources/upload/userProfilePhoto/user_Inform.png' , #{USER_LINK_TYPE}) 
			<choose>
				<when test="USER_LINK_TYPE == 1">INTO TB_BASIC_USER VALUES(#{USER_NO},#{USER_PASSWORD}) </when>
				<when test="USER_LINK_TYPE == 2">INTO TB_NAVER_USER VALUES(#{USER_NO},#{USER_PASSWORD}) </when>
			</choose>
			SELECT * FROM DUAL 
	</insert>
	
	<select id='selectUserWithNo' parameterType="_int" resultType="map">
		SELECT * FROM (SELECT * FROM TB_USER_ACTIVE WHERE USER_NO=#{userNo}) LEFT JOIN TB_USER USING(USER_NO) LEFT JOIN TB_BASIC_USER USING(USER_NO) LEFT JOIN TB_NAVER_USER USING(USER_NO)
	</select>
	
	<select id="selectUserAddressList" parameterType="_int" resultType="map">
		SELECT * FROM TB_USER_ADDRESS WHERE USER_NO=#{userNo}
	</select>
	
	<select id="selectUserAccountList" parameterType="_int" resultType="map">
		SELECT * FROM TB_USER_ACCOUNT WHERE USER_NO=#{userNo}
	</select>
	
	<select id="selectUserFundingList" parameterType="_int" resultType="map">
		SELECT C.*,REWARD_DEADLINE-TRUNC(SYSDATE) as REWARD_REMAIN_DATE,
		NVL((SELECT SUM(B.REWARD_ITEM_PRICE+A.REWARD_SUPPORT_ADD_DONATION) FROM TB_REWARD_SUPPORT A INNER JOIN TB_REWARD_ITEM B USING (REWARD_ITEM_NO) WHERE C.REWARD_NO=B.REWARD_NO GROUP BY B.REWARD_NO),0) AS REWARD_PRESENT_COLLECTION,
		NVL(FLOOR(((SELECT SUM(B.REWARD_ITEM_PRICE+A.REWARD_SUPPORT_ADD_DONATION) FROM TB_REWARD_SUPPORT A INNER JOIN TB_REWARD_ITEM B USING (REWARD_ITEM_NO) WHERE C.REWARD_NO=B.REWARD_NO AND B.REWARD_ITEM_PRICE IS NOT NULL AND A.REWARD_SUPPORT_ADD_DONATION IS NOT NULL GROUP BY B.REWARD_NO)/REWARD_GOAL)*100),0) AS REWARD_ACHIEVEMENT_PERSENT,
		D.REWARD_CATEGORY_NAME 
		FROM TB_REWARD C INNER JOIN TB_REWARD_CATEGORY D ON C.REWARD_CATEGORY_NO=D.REWARD_CATEGORY_NO
		WHERE reward_no in( SELECT reward_no FROM TB_REWARD_SUPPORT WHERE USER_NO=#{userNo} ) ORDER BY REWARD_ENROLL_DATE DESC
	</select>
	
	<select id="selectUserMadeFundingList" parameterType="_int" resultType="map">
		SELECT C.*,REWARD_DEADLINE-TRUNC(SYSDATE) as REWARD_REMAIN_DATE,
		NVL((SELECT SUM(B.REWARD_ITEM_PRICE+A.REWARD_SUPPORT_ADD_DONATION) FROM TB_REWARD_SUPPORT A INNER JOIN TB_REWARD_ITEM B USING (REWARD_ITEM_NO) WHERE C.REWARD_NO=B.REWARD_NO GROUP BY B.REWARD_NO),0) AS REWARD_PRESENT_COLLECTION,
		NVL(FLOOR(((SELECT SUM(B.REWARD_ITEM_PRICE+A.REWARD_SUPPORT_ADD_DONATION) FROM TB_REWARD_SUPPORT A INNER JOIN TB_REWARD_ITEM B USING (REWARD_ITEM_NO) WHERE C.REWARD_NO=B.REWARD_NO AND B.REWARD_ITEM_PRICE IS NOT NULL AND A.REWARD_SUPPORT_ADD_DONATION IS NOT NULL GROUP BY B.REWARD_NO)/REWARD_GOAL)*100),0) AS REWARD_ACHIEVEMENT_PERSENT,
		D.REWARD_CATEGORY_NAME 
		FROM TB_REWARD C INNER JOIN TB_REWARD_CATEGORY D ON C.REWARD_CATEGORY_NO=D.REWARD_CATEGORY_NO
		WHERE USER_NO=#{userNo} AND REWARD_STATE >2 ORDER BY REWARD_ENROLL_DATE DESC
	</select>
	
	<select id="selectUserLikeFundingList" parameterType="_int" resultType="map">
		SELECT C.*,REWARD_DEADLINE-TRUNC(SYSDATE) as REWARD_REMAIN_DATE,
		NVL((SELECT SUM(B.REWARD_ITEM_PRICE+A.REWARD_SUPPORT_ADD_DONATION) FROM TB_REWARD_SUPPORT A INNER JOIN TB_REWARD_ITEM B USING (REWARD_ITEM_NO) WHERE C.REWARD_NO=B.REWARD_NO GROUP BY B.REWARD_NO),0) AS REWARD_PRESENT_COLLECTION,
		NVL(FLOOR(((SELECT SUM(B.REWARD_ITEM_PRICE+A.REWARD_SUPPORT_ADD_DONATION) FROM TB_REWARD_SUPPORT A INNER JOIN TB_REWARD_ITEM B USING (REWARD_ITEM_NO) WHERE C.REWARD_NO=B.REWARD_NO AND B.REWARD_ITEM_PRICE IS NOT NULL AND A.REWARD_SUPPORT_ADD_DONATION IS NOT NULL GROUP BY B.REWARD_NO)/REWARD_GOAL)*100),0) AS REWARD_ACHIEVEMENT_PERSENT,
		D.REWARD_CATEGORY_NAME 
		FROM TB_REWARD C INNER JOIN TB_REWARD_CATEGORY D ON C.REWARD_CATEGORY_NO=D.REWARD_CATEGORY_NO
		WHERE reward_no in (SELECT REWARD_NO FROM TB_REWARD_LIKE WHERE USER_NO=#{userNo}) ORDER BY REWARD_ENROLL_DATE DESC
	</select>
	
	<update id="updateUserPhoto" parameterType="map">
		UPDATE TB_USER_ACTIVE SET USER_PROFILEPHOTO = #{USER_PROFILEPHOTO} WHERE USER_NO = #{USER_NO}
	</update>
	<update id='updateUserName' parameterType="map">
		UPDATE TB_USER_ACTIVE SET USER_NAME = #{USER_NAME} WHERE USER_NO = #{USER_NO}
	</update>
	<insert id='insertOutUser' parameterType='map'>
		INSERT INTO TB_USER_OUT(USER_EMAIL, USER_NO, USER_OUT_REASON) VALUES((SELECT USER_EMAIL FROM TB_USER_ACTIVE WHERE USER_NO =#{userNo}), #{userNo},#{outReason})
	</insert>
	<delete id="deleteUserPw" parameterType="map">
		DELETE FROM 
		<choose>
			<when test="USER_LINK_TYPE == 1"> TB_BASIC_USER </when>
			<when test="USER_LINK_TYPE == 2"> TB_NAVER_USER </when>
		</choose>
		WHERE USER_NO = #{userNo}
	</delete>
	<delete id="deleteUserAddress" parameterType="_int">
		DELETE FROM TB_USER_ADDRESS WHERE USER_NO = #{userNo}
	</delete>
	<delete id="deleteActiveUser" parameterType="_int">
		DELETE FROM TB_USER_ACTIVE WHERE USER_NO = #{userNo}
	</delete>
	<update id="updateOutUser" parameterType="_int">
		UPDATE TB_USER SET USER_TYPE = 2 WHERE USER_NO=#{userNo}
	</update>
	<select id='selectEqualEmail' parameterType="string" resultType="_int">
		SELECT COUNT(USER_EMAIL) FROM (SELECT USER_EMAIL FROM TB_USER_ACTIVE UNION SELECT USER_EMAIL FROM TB_USER_OUT) WHERE USER_EMAIL=#{email} 
	</select>
	<select id="selectUserLinkType" parameterType="string" resultType="_int">
		SELECT USER_LINK_TYPE FROM TB_USER_ACTIVE WHERE USER_EMAIL=#{email}
	</select>
	<insert id="insertUserTemp" parameterType="map">
		INSERT INTO TB_USER_TEMP VALUES(#{tempKey},#{userNo}, DEFAULT)
	</insert>
	<select id="selectUserTemp" parameterType="string" resultType="map">
		SELECT * FROM TB_USER_TEMP WHERE TEMP_KEY = #{key}
	</select>
	<update id="updateUserPassword" parameterType="map">
		UPDATE TB_BASIC_USER SET USER_PASSWORD = #{password} WHERE USER_NO = #{userNo}
	</update>
	<delete id="deleteUserTemp" parameterType="_int">
		DELETE FROM TB_USER_TEMP WHERE USER_NO = #{userNo}
	</delete>
	<update id="updateUserEmail" parameterType="map">
		UPDATE TB_USER_ACTIVE SET USER_EMAIL = #{email} WHERE USER_NO = #{userNo}
	</update>
</mapper>

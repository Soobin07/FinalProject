<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<mapper namespace="user">

	<select id="selectUserWithEmail" parameterType="string" resultType="map">
		SELECT * FROM (SELECT * FROM TB_USER_ACTIVE WHERE USER_EMAIL=#{email}) LEFT JOIN TB_USER USING(USER_NO) LEFT JOIN TB_BASIC_USER USING(USER_NO) LEFT JOIN TB_NAVER_USER USING(USER_NO)
	</select>
	
	<insert id="insertUser" parameterType="map">
		<selectKey order="BEFORE" resultType="_int" keyProperty="USER_NO">SELECT SEQ_USER_NO.NEXTVAL FROM DUAL </selectKey>
			INSERT ALL 
				INTO TB_USER VALUES(#{USER_NO}, 1) 
				INTO TB_USER_ACTIVE VALUES(#{USER_NO}, #{USER_EMAIL}, #{USER_NAME}, SYSDATE , '/resources/upload/userProfilePhoto/user_Inform.png' , #{USER_LINK_TYPE}) 
			<choose>
				<when test="USER_LINK_TYPE == 1">INTO TB_BASIC_USER VALUES(#{USER_NO},#{USER_PASSWORD}) </when>
				<when test="USER_LINK_TYPE == 2">INTO TB_NAVER_USER VALUES(#{USER_NO},#{USER_PASSWORD}) </when>
				<when test="USER_LINK_TYPE == 3">INTO TB_NAVER_USER VALUES(#{USER_NO},#{USER_PASSWORD}) </when>
			</choose>
			SELECT * FROM DUAL 
	</insert>
	
	<select id='selectUserWithNo' parameterType="_int" resultType="map">
		SELECT * FROM (SELECT * FROM TB_USER_ACTIVE WHERE USER_NO=#{userNo}) LEFT JOIN TB_USER USING(USER_NO) LEFT JOIN TB_BASIC_USER USING(USER_NO) LEFT JOIN TB_NAVER_USER USING(USER_NO)
	</select>
	
	<select id="selectUserAddressList" parameterType="_int" resultType="map">
		SELECT * FROM TB_USER_ADDRESS WHERE USER_NO=#{userNo}
	</select>
	
	<select id="selectUserAccountList" parameterType="_int" resultType="map">
		SELECT * FROM TB_USER_ACCOUNT WHERE USER_NO=#{userNo}
	</select>
	
	<select id="selectUserFundingList" parameterType="map" resultType="map">
		SELECT F.*,F.REWARD_DEADLINE-TRUNC(SYSDATE) AS REWARD_REMAIN_DATE,
	       NVL((SELECT SUM(C.REWARD_SUPPORT_ADD_DONATION+((SELECT SUM(A.REWARD_SUPPORT_NUM*B.REWARD_ITEM_PRICE) FROM TB_REWARD_SUPPORT_ITEM A INNER JOIN TB_REWARD_ITEM B ON A.REWARD_ITEM_NO = B.REWARD_ITEM_NO WHERE A.REWARD_NO=F.REWARD_NO AND A.REWARD_SUPPORT_NO = C.REWARD_SUPPORT_NO GROUP BY A.REWARD_SUPPORT_NO))) FROM TB_REWARD_SUPPORT C WHERE C.REWARD_NO=F.REWARD_NO GROUP BY C.REWARD_NO),0) AS REWARD_PRESENT_COLLECTION,
	       NVL(FLOOR(((SELECT SUM(C.REWARD_SUPPORT_ADD_DONATION+((SELECT SUM(A.REWARD_SUPPORT_NUM*B.REWARD_ITEM_PRICE) FROM TB_REWARD_SUPPORT_ITEM A INNER JOIN TB_REWARD_ITEM B ON A.REWARD_ITEM_NO = B.REWARD_ITEM_NO WHERE A.REWARD_NO=F.REWARD_NO AND A.REWARD_SUPPORT_NO = C.REWARD_SUPPORT_NO GROUP BY A.REWARD_SUPPORT_NO))) FROM TB_REWARD_SUPPORT C WHERE C.REWARD_NO=F.REWARD_NO GROUP BY C.REWARD_NO)/F.REWARD_GOAL)*100),0) AS REWARD_ACHIEVEMENT_PERSENT,
	       E.REWARD_CATEGORY_NAME,
	       FLOOR(F.REWARD_START_DATE-TRUNC(SYSDATE)) AS REWARD_OPEN_DATE
       FROM TB_REWARD F INNER JOIN TB_REWARD_CATEGORY E ON F.REWARD_CATEGORY_NO=E.REWARD_CATEGORY_NO WHERE REWARD_NO in (SELECT REWARD_NO FROM TB_REWARD_SUPPORT WHERE USER_NO =#{userNo})
		<choose>
			<when test='filter == 0'>
				AND REWARD_STATE IN (4, 5, 6, 7, 8)
			</when>
			<when test='filter == 1'>
				AND REWARD_STATE in (4,5)
			</when>
			<when test='filter == 2'>
				AND REWARD_STATE in (6,7,8)
			</when>
			<when test='filter == 3'>
				AND REWARD_STATE IN (4, 5, 6,7,8)
			</when>
			<otherwise>
				AND REWARD_STATE in (3, 4, 5, 6)
			</otherwise>
		</choose>
	</select>
	
	<select id="selectUserMadeFundingList" parameterType="map" resultType="map">
		SELECT F.*,F.REWARD_DEADLINE-TRUNC(SYSDATE) AS REWARD_REMAIN_DATE,
	       NVL((SELECT SUM(C.REWARD_SUPPORT_ADD_DONATION+((SELECT SUM(A.REWARD_SUPPORT_NUM*B.REWARD_ITEM_PRICE) FROM TB_REWARD_SUPPORT_ITEM A INNER JOIN TB_REWARD_ITEM B ON A.REWARD_ITEM_NO = B.REWARD_ITEM_NO WHERE A.REWARD_NO=F.REWARD_NO AND A.REWARD_SUPPORT_NO = C.REWARD_SUPPORT_NO GROUP BY A.REWARD_SUPPORT_NO))) FROM TB_REWARD_SUPPORT C WHERE C.REWARD_NO=F.REWARD_NO GROUP BY C.REWARD_NO),0) AS REWARD_PRESENT_COLLECTION,
	       NVL(FLOOR(((SELECT SUM(C.REWARD_SUPPORT_ADD_DONATION+((SELECT SUM(A.REWARD_SUPPORT_NUM*B.REWARD_ITEM_PRICE) FROM TB_REWARD_SUPPORT_ITEM A INNER JOIN TB_REWARD_ITEM B ON A.REWARD_ITEM_NO = B.REWARD_ITEM_NO WHERE A.REWARD_NO=F.REWARD_NO AND A.REWARD_SUPPORT_NO = C.REWARD_SUPPORT_NO GROUP BY A.REWARD_SUPPORT_NO))) FROM TB_REWARD_SUPPORT C WHERE C.REWARD_NO=F.REWARD_NO GROUP BY C.REWARD_NO)/F.REWARD_GOAL)*100),0) AS REWARD_ACHIEVEMENT_PERSENT,
	       E.REWARD_CATEGORY_NAME,
	       FLOOR(F.REWARD_START_DATE-TRUNC(SYSDATE)) AS REWARD_OPEN_DATE
       FROM TB_REWARD F INNER JOIN TB_REWARD_CATEGORY E ON F.REWARD_CATEGORY_NO=E.REWARD_CATEGORY_NO WHERE USER_NO=#{userNo}
		<choose>
			<when test='filter == 0'>
				AND REWARD_STATE IN (4, 5, 6,7,8)
			</when>
			<when test='filter == 1'>
				AND REWARD_STATE in (4,5)
			</when>
			<when test='filter == 2'>
				AND REWARD_STATE in (6,7,8)
			</when>
			<when test='filter == 3'>
 				AND REWARD_STATE IN (1,2,3,4,5,6,7,8) ORDER BY REWARD_STATE ASC
			</when>
			<when test='filter == 4'>
				AND REWARD_STATE IN (1,2,3)
			</when>
		</choose>
	</select>
	
	<select id="selectUserLikeFundingList" parameterType="map" resultType="map">
		SELECT F.*,F.REWARD_DEADLINE-TRUNC(SYSDATE) AS REWARD_REMAIN_DATE,
	       NVL((SELECT SUM(C.REWARD_SUPPORT_ADD_DONATION+((SELECT SUM(A.REWARD_SUPPORT_NUM*B.REWARD_ITEM_PRICE) FROM TB_REWARD_SUPPORT_ITEM A INNER JOIN TB_REWARD_ITEM B ON A.REWARD_ITEM_NO = B.REWARD_ITEM_NO WHERE A.REWARD_NO=F.REWARD_NO AND A.REWARD_SUPPORT_NO = C.REWARD_SUPPORT_NO GROUP BY A.REWARD_SUPPORT_NO))) FROM TB_REWARD_SUPPORT C WHERE C.REWARD_NO=F.REWARD_NO GROUP BY C.REWARD_NO),0) AS REWARD_PRESENT_COLLECTION,
	       NVL(FLOOR(((SELECT SUM(C.REWARD_SUPPORT_ADD_DONATION+((SELECT SUM(A.REWARD_SUPPORT_NUM*B.REWARD_ITEM_PRICE) FROM TB_REWARD_SUPPORT_ITEM A INNER JOIN TB_REWARD_ITEM B ON A.REWARD_ITEM_NO = B.REWARD_ITEM_NO WHERE A.REWARD_NO=F.REWARD_NO AND A.REWARD_SUPPORT_NO = C.REWARD_SUPPORT_NO GROUP BY A.REWARD_SUPPORT_NO))) FROM TB_REWARD_SUPPORT C WHERE C.REWARD_NO=F.REWARD_NO GROUP BY C.REWARD_NO)/F.REWARD_GOAL)*100),0) AS REWARD_ACHIEVEMENT_PERSENT,
	       E.REWARD_CATEGORY_NAME,
	       FLOOR(F.REWARD_START_DATE-TRUNC(SYSDATE)) AS REWARD_OPEN_DATE
       FROM TB_REWARD F INNER JOIN TB_REWARD_CATEGORY E ON F.REWARD_CATEGORY_NO=E.REWARD_CATEGORY_NO WHERE REWARD_NO in (SELECT REWARD_NO FROM TB_REWARD_LIKE WHERE USER_NO = #{userNo})
		<choose>
			<when test='filter == 0'>
				AND REWARD_STATE IN (4, 5, 6,7)
			</when>
			<when test='filter == 1'>
				AND REWARD_STATE in (4,5)
			</when>
			<when test='filter == 2'>
				AND REWARD_STATE in (6,7,8)
			</when>
			<otherwise>
				AND REWARD_STATE in(4, 5, 6,7)
			</otherwise>
		</choose>
	</select>
	
	<update id="updateUserPhoto" parameterType="map">
		UPDATE TB_USER_ACTIVE SET USER_PROFILEPHOTO = #{USER_PROFILEPHOTO} WHERE USER_NO = #{USER_NO}
	</update>
	<update id='updateUserName' parameterType="map">
		UPDATE TB_USER_ACTIVE SET USER_NAME = #{USER_NAME} WHERE USER_NO = #{USER_NO}
	</update>
	<insert id='insertOutUser' parameterType='map'>
		INSERT INTO TB_USER_OUT(USER_EMAIL, USER_NO, USER_OUT_REASON) VALUES((SELECT USER_EMAIL FROM TB_USER_ACTIVE WHERE USER_NO =#{userNo}), #{userNo},#{outReason})
	</insert>
	<delete id="deleteUserPw" parameterType="map">
		DELETE FROM 
		<choose>
			<when test="USER_LINK_TYPE == 1"> TB_BASIC_USER </when>
			<when test="USER_LINK_TYPE == 2"> TB_NAVER_USER </when>
			<when test="USER_LINK_TYPE == 3"> TB_KAKAO_USER </when>
		</choose>
		WHERE USER_NO = #{userNo}
	</delete>
	<delete id="deleteUserAllAddress" parameterType="_int">
		DELETE FROM TB_USER_ADDRESS WHERE USER_NO = #{userNo}
	</delete>
	<delete id="deleteActiveUser" parameterType="_int">
		DELETE FROM TB_USER_ACTIVE WHERE USER_NO = #{userNo}
	</delete>
	<update id="updateOutUser" parameterType="_int">
		UPDATE TB_USER SET USER_TYPE = 2 WHERE USER_NO=#{userNo}
	</update>
	<select id='selectEqualEmail' parameterType="string" resultType="_int">
		SELECT COUNT(USER_EMAIL) FROM (SELECT USER_EMAIL FROM TB_USER_ACTIVE UNION SELECT USER_EMAIL FROM TB_USER_OUT) WHERE USER_EMAIL=#{email} 
	</select>
	<select id="selectUserLinkType" parameterType="string" resultType="_int">
		SELECT USER_LINK_TYPE FROM TB_USER_ACTIVE WHERE USER_EMAIL=#{email}
	</select>
	<insert id="insertUserTemp" parameterType="map">
		INSERT INTO TB_USER_TEMP VALUES(#{tempKey},#{userNo}, DEFAULT)
	</insert>
	<select id="selectUserTemp" parameterType="string" resultType="map">
		SELECT * FROM TB_USER_TEMP WHERE TEMP_KEY = #{key}
	</select>
	<update id="updateUserPassword" parameterType="map">
		UPDATE TB_BASIC_USER SET USER_PASSWORD = #{password} WHERE USER_NO = #{userNo}
	</update>
	<delete id="deleteUserTemp" parameterType="_int">
		DELETE FROM TB_USER_TEMP WHERE USER_NO = #{userNo}
	</delete>
	<update id="updateUserEmail" parameterType="map">
		UPDATE TB_USER_ACTIVE SET USER_EMAIL = #{email} WHERE USER_NO = #{userNo}
	</update>
	<delete id='deleteUserAddress' parameterType="_int">
		DELETE FROM TB_USER_ADDRESS WHERE ADDRESS_NO = #{addrNo}
	</delete>
	<insert id="addAddress" parameterType="map">
		<selectKey order="BEFORE" resultType="_int" keyProperty="ADDRESS_NO">SELECT SEQ_USER_ADDRESS_NO.NEXTVAL FROM DUAL </selectKey>
		INSERT INTO TB_USER_ADDRESS VALUES(#{ADDRESS_NO},#{userNo},#{addrName},#{zipNo},#{addrWhole},#{addrDetail},#{phone},#{receiver})
	</insert>
	
	<select id='getRewardSupportDetail' parameterType="map" resultType="_int">
		select s.reward_support_state, s.reward_support_add_donation,a.*, ac.account_no, ac.bank_name, ac.account_user_name,
		i.reward_support_num, i.reward_item_select_option_no, so.REWARD_ITEM_SEL_OPTION_CONTENT, io.REWARD_ITEM_IN_CONTENT, ri.reward_item_name, ri.reward_item_delivery_Address, ri.reward_item_delivery_price, ri.reward_item_price
		from tb_reward_support s 
		left join tb_reward_support_address a on (s.reward_support_no=a.reward_support_no)
		left join tb_reward_support_account ac on (s.reward_support_no = ac.reward_support_no)
		left join tb_reward_support_item i on (s.reward_support_no=i.reward_support_no)
		left join tb_reward_item ri on(i.reward_item_no = ri.reward_item_no)
		left join tb_reward_select_option so on(i.REWARD_ITEM_SELECT_OPTION_NO = so.REWARD_ITEM_SEL_OPTION_NO)
		left join TB_REWARD_SUPPORT_INPUT_OPTION io on(s.REWARD_SUPPORT_NO=io.REWARD_SUPPORT_NO)
		where s.reward_support_no in (select reward_support_no from tb_reward_support where reward_no=#{rewardNo} and user_no=#{userNo})
	</select>
</mapper>

<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<mapper namespace="user">
	<!-- 회원정보 담는 map -->
	<resultMap type="map" id='userMap'></resultMap>

	<!-- 회원가입 -->
		<!-- 회원정보 저장 : Map으로 들어온 정보 저장 -->
			<insert id="insertUser" parameterType="map">
				INSERT ALL
				<selectKey keyProperty="USER_NO" resultType="_int" order="BEFORE">
					SELECT SEQ_USER_NO.NEXTVAL FROM DUAL
				</selectKey>
				INTO TB_USER VALUES(#{USER_NO}, 1)
				INTO TB_USER_ACTIVE VALUES(#{USER_NO},#{USER_EMAIL},#{USER_NAME},SYSDATE,#{USER_PROFILEPHOTO},#{USER_LINK_TYPE})
				<choose>
					<when test="#{USERTYPE}==1">
						INTO TB_BASIC_USER VALUES(#{USER_NO},#{USER_PASSWORD})
					</when>
					<when test="#{USERTYPE}==2">
						INTO TB_NAVER_USER VALUES(#{UNIQKEY},#{USER_NO})
					</when>
					<when test="#{USERTYPE}==3">
						INTO TB_KAKAO_USER VALUES(#{UNIQKEY},#{USER_NO})
					</when>
				</choose>
				SELECT * FROM DUAL
			</insert>
		
		<!-- 이메일 중복 확인 : 입력 값과 중복되는 이메일 정보 소유 여부 -->
			<select id='selectUserEmail' resultType='_int' parameterType="string">
				SELECT COUNT(USER_EMAIL) FROM TB_USER_ACTIVE WHERE USER_EMAIL=#{USER_EMAIL}
			</select>
	
	
	<!-- 회원탈퇴 -->
		<!-- TB_{USER_LINK_TYPE}_USER테이블의 값은 삭제 -->
			<delete id="deleteUserPassword" parameterType='_int'>
				DELETE FROM (SELECT * FROM (SELECT * FROM TB_BASIC_USER UNION SELECT * FROM TB_NAVER_USER UNION SELECT * FROM TB_KAKAO_USER)) WHERE USER_NO=#{USER_NO}
			</delete>
		<!-- tb_user_active에서 tb_user_out으로 복사 후 tb_user_active 다 NULL값으로 UPDATE -->
			<insert id="outUser" parameterType="map">
				INSERT TB_USER_OUT VALUES (#{USER_NO},#{USER_EMAIL}, #{SYSDATE}, #{OUT_REASON})
			</insert>
				
	<!-- 회원정보수정 -->
		<!-- 불러오기 -->
			<!-- 기본회원정보 불러오기 : 유저번호 --> 														<!-- 여기 param이 int 하나면 편한데, usertype를 어떻게 받아오는지 몰라서.. -->
				<select id='selectUserBasic' resultMap='userMap' parameterType="_int">
					SELECT * FROM (SELECT * FROM TB_USER_ACTIVE) LEFT JOIN TB_USER USING(USER_NO)
					<choose>
						<when test="USER_LINK_TYPE==1">
							LEFT JOIN TB_BASIC_USER USING(USER_NO)
						</when>
						<when test="USER_LINK_TYPE==2">
							LEFT JOIN TB_NAVER_USER USING(USER_NO)
						</when>
						<when test="USER_LINK_TYPE==3">
							LEFT JOIN TB_KAKAO_USER USING(USER_NO)
						</when>
					</choose>
					WHERE USER_NO=#{USER_NO}
				</select>
			<!-- 회원 정보 불러오기 : 주소록 -->
				<select id='selectUserAddress' parameterType='_int' resultType='map'>
					SELECT * FROM TB_USER_ADDRESS WHERE USER_NO=#{USER_NO}
				</select>
			<!-- 회원 정보 불러오기 : 결제정보(계좌번호) -->
				<select id='selectUserAccount' parameterType='_int' resultType='map'>
					SELECT * FROM TB_USER_ACCOUNT WHERE USER_NO=#{USER_NO}
				</select>
		
		<!-- 업데이트 -->
			<!-- 유저 기본 정보 업데이트 -->
				<update id="updateUser" parameterType="map">
					UPDATE TB_USER_ACTIVE SET USER_EMAIL=#{USER_EMIAL}, USER_NAME=#{USER_NAME}, USER_ENROLLDATE=#{USER_ENROLLDATE} WHERE USER_NO=#{USER_NO}
				</update>
			<!-- 유저 비밀번호 업데이트 -->
				<update id='updatePassword' parameterType="map">
					UPDATE TB_BASIC_USER SET USER_PASSWORD=#{USER_PASSWORD} WHERE USER_NO=#{USER_NO}
				</update>
			<!-- 유저 프로필사진 업데이트 -->
				<update id="updateUserPicture" parameterType="map">
					UPDATE TB_USER_ACTIVE SET USER_PROFILEPHOTO=#{USER_PROFILEPHOTO} WHERE USER_NO=#{USER_NO}
				</update>
				
				
	<!-- 유저 주소록 관련 / 유저 계좌 관련 	: 임시!!!!!
											다른곳에서 발견하면 바로 그거 씀!!! -->
			<!-- 유저 주소록 추가 -->
				<insert id="insertUserAddress" parameterType='map'>
					INSERT INTO TB_USER_ADDRESS VALUES(SEQ_USER_ADDRESS_NO.NEXTVAL, #{USER_NO}, #{ADDRESS_NAME}, #{ADDRESS_ZIP_NO}, #{ADRESS_WHOLE}, #{ADDRESS_DETAIL}, #{ADDRESS_PHONE}, #{ADDRESS_RECEIVER_NAME})
				</insert>
			<!-- 유저 주소록 업데이트 -->
				<update id='updateUserAddress' parameterType='map'>
					UPDATE TB_USER_ADDRESS SET ADDRESS_NAME=#{ADDRESS_NAME}, ADDRESS_ZIP_NO=#{ADDRESS_ZIP_NO}, ADRESS_WHOLE=#{ADRESS_WHOLE}, ADDRESS_DETAIL=#{ADDRESS_DETAIL}, ADDRESS_PHONE=#{ADDRESS_PHONE}, ADDRESS_RECEIVER_NAME=#{ADDRESS_RECEIVER_NAME} WHERE ADDRESS_NO=#{ADDRESS_NO}
				</update>
			<!-- 유저 주소록 삭제 -->
				<delete id="deleteUserAddress" parameterType='map'>
					DELETE FROM TB_USER_ADDRESS WHERE ADDRESS_NO=#{ADDRESS_NO} 
				</delete>
			<!-- 유저 결제정보 추가 -->
				<insert id='insertUserAccount' parameterType='map'>
					INSERT INTO TB_USER_ACCOUNT VALUES(#{FIN_NO},#{ACCOUNT_NO},#{BANK_NO},#{USER_NO},#{ACCESS_TOKEN}, #{REFRESH_TOKEN}, #{REALNAME_AUTH_CODE}, #{USER_SERIAL_NO}, #{ACCOUNT_USER_NAME},#{ACCOUNT_NAME})
				</insert>
			<!-- 유저 결제정보 삭제 -->
				<delete id="deleteUserAccount" parameterType='_int'>
					DELETE FROM TB_USER_ACCOUNT WHERE USER_NO=#{USER_NO}
				</delete>
	
	<!-- 로그인  -->
		<!-- 기본회원정보 불러오기 : 이메일 -->
			<select id='selectUser' resultMap='userMap' parameterType="string">
				SELECT * FROM (SELECT * FROM TB_USER_ACTIVE) LEFT JOIN TB_USER USING(USER_NO)
				<choose>
					<when test="USER_LINK_TYPE==1">
						LEFT JOIN TB_BASIC_USER USING(USER_NO)
					</when>
					<when test="USER_LINK_TYPE==2">
						LEFT JOIN TB_NAVER_USER USING(USER_NO)
					</when>
					<when test="USER_LINK_TYPE==3">
						LEFT JOIN TB_KAKAO_USER USING(USER_NO)
					</when>
				</choose>
				WHERE USER_EMAIL=#{USER_EMAIL}
			</select>
			
			
	<!-- ID / PW 찾기 -->
		<!-- ID찾기 : 입력 이메일의 USER_LINK_TYPE을 찾음 -->
			<select id="findId" parameterType="string" resultType='map'>
				SELECT USER_EMAIL, USER_LINK_TYPE FROM TB_USER_ACTIVE WHERE USER_EMAIL=#{EMAIL}
			</select>
		<!-- PW찾기 : USER_NO와 난수 저장 -->
			<insert id='insertFindPwLink' parameterType='map'>
				INSERT INTO TB_USER_TEMP VALUES(#{TEMP_KEY}, #{USER_NO}, SYSDATE)
			</insert>
		<!-- PW찾기 : 난수로 USER_NO 찾기 -->
			<select id="selectFindPwLink" parameterType='string' resultType='map'>
				SELECT * FROM TB_USER_TEMP WHERE TEMP_KEY=#{TEMP_KEY}
			</select>
		<!-- 사용한 링크 삭제 -->
			<delete id="deleteFindPwLink" parameterType='string'>
				DELETE FROM TB_USER_TEMP WHERE TEMP_KEY=#{TEMP_KEY}
			</delete>
</mapper>
